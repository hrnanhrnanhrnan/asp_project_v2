// <auto-generated />
using System;
using Candyshop.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace candyshop_project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Candyshop.Models.Campaign", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Candyshop.Models.Candy", b =>
                {
                    b.Property<int>("CandyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInStock")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CandyId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Candies");

                    b.HasData(
                        new
                        {
                            CandyId = 1,
                            AmountInStock = 10,
                            CategoryId = 1,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\chocolateCandy3-small.jpg",
                            ImageUrl = "\\Images\\chocolet.candy.jpg",
                            Name = "Assorted Chocolet Candy",
                            Price = 4.95m
                        },
                        new
                        {
                            CandyId = 2,
                            AmountInStock = 15,
                            CategoryId = 1,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\chocolateCandy-small.jpg",
                            ImageUrl = "\\Images\\chocolateCandy.jpg",
                            Name = "Assorted Chocolet Candy",
                            Price = 3.95m
                        },
                        new
                        {
                            CandyId = 3,
                            AmountInStock = 10,
                            CategoryId = 1,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\chocolateCandy2-small.jpg",
                            ImageUrl = "\\Images\\chocolateCandy2.jpg",
                            Name = "Assorted Chocolet Candy",
                            Price = 2.95m
                        },
                        new
                        {
                            CandyId = 4,
                            AmountInStock = 20,
                            CategoryId = 2,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\FruitCandy-small.jpg",
                            ImageUrl = "\\Images\\FruitCandy.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 6.95m
                        },
                        new
                        {
                            CandyId = 5,
                            AmountInStock = 20,
                            CategoryId = 2,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\fruitCandy2-small.jpg",
                            ImageUrl = "\\Images\\fruitCandy2.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 3.95m
                        },
                        new
                        {
                            CandyId = 6,
                            AmountInStock = 25,
                            CategoryId = 2,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\fruitCandy3-small.jpg",
                            ImageUrl = "\\Images\\fruitCandy3.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 4.95m
                        },
                        new
                        {
                            CandyId = 7,
                            AmountInStock = 25,
                            CategoryId = 3,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gummyCandy-small.jpg",
                            ImageUrl = "\\Images\\gummyCandy.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 4.95m
                        },
                        new
                        {
                            CandyId = 8,
                            AmountInStock = 8,
                            CategoryId = 3,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gummyCandy2-small.jpg",
                            ImageUrl = "\\Images\\gummyCandy2.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 6.95m
                        },
                        new
                        {
                            CandyId = 9,
                            AmountInStock = 30,
                            CategoryId = 3,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gummyCandy3-small.jpg",
                            ImageUrl = "\\Images\\gummyCandy3.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 4.95m
                        },
                        new
                        {
                            CandyId = 10,
                            AmountInStock = 0,
                            CategoryId = 4,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\halloweenCandy-small.jpg",
                            ImageUrl = "\\Images\\halloweenCandy.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 3.95m
                        },
                        new
                        {
                            CandyId = 11,
                            AmountInStock = 0,
                            CategoryId = 4,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\halloweenCandy2-small.jpg",
                            ImageUrl = "\\Images\\halloweenCandy2.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 5.95m
                        },
                        new
                        {
                            CandyId = 12,
                            AmountInStock = 7,
                            CategoryId = 4,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\halloweenCandy3-small.jpg",
                            ImageUrl = "\\Images\\halloweenCandy3.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 6.95m
                        },
                        new
                        {
                            CandyId = 13,
                            AmountInStock = 150,
                            CategoryId = 5,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hardCandy-small.jpg",
                            ImageUrl = "\\Images\\hardCandy.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 3.95m
                        },
                        new
                        {
                            CandyId = 14,
                            AmountInStock = 150,
                            CategoryId = 5,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hardCandy2-small.jpg",
                            ImageUrl = "\\Images\\hardCandy2.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 2.95m
                        },
                        new
                        {
                            CandyId = 15,
                            AmountInStock = 114,
                            CategoryId = 5,
                            Description = " Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\hardCandy3-small.jpg",
                            ImageUrl = "\\Images\\hardCandy3.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 5.95m
                        });
                });

            modelBuilder.Entity("Candyshop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescriptin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categores");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Chocolate Candy"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Fruit Candy"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Gummy Candy"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Halloween Candy"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Hard Candy"
                        });
                });

            modelBuilder.Entity("Candyshop.Models.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CandyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFlatAmount")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CandyId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Candyshop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Address = "547 Davis Lane",
                            City = "Denver",
                            FirstName = "Peter",
                            LastName = "D. Murphy",
                            OrderPlaced = new DateTime(2022, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 118.75m,
                            PhoneNumber = "720-323-6178",
                            State = "Alabama",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 2,
                            Address = "2389 Medical Center Drive",
                            City = "Denver",
                            FirstName = "Stella",
                            LastName = "S. McElroy",
                            OrderPlaced = new DateTime(2022, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 59.4m,
                            PhoneNumber = "941-468-9331",
                            State = "Alabama",
                            ZipCode = "33610"
                        },
                        new
                        {
                            OrderId = 3,
                            Address = "1078 Park Street",
                            City = "Pittsburg",
                            FirstName = "John",
                            LastName = "N. Jeffers",
                            OrderPlaced = new DateTime(2022, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 128.5m,
                            PhoneNumber = "925-439-8682",
                            State = "California",
                            ZipCode = "94565"
                        },
                        new
                        {
                            OrderId = 4,
                            Address = "4104 Riverwood Drive",
                            City = "Pittsburg",
                            FirstName = "Joseph",
                            LastName = " A. Schultz",
                            OrderPlaced = new DateTime(2022, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 114.55m,
                            PhoneNumber = "530-328-0168",
                            State = "California",
                            ZipCode = "95814"
                        },
                        new
                        {
                            OrderId = 5,
                            Address = "827 Kennedy Court",
                            City = "Pittsburg",
                            FirstName = "Eunice",
                            LastName = "T. Stroud",
                            OrderPlaced = new DateTime(2022, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 146.75m,
                            PhoneNumber = "774-563-0433",
                            State = "California",
                            ZipCode = "02132"
                        },
                        new
                        {
                            OrderId = 6,
                            Address = "3897 Allison Avenue",
                            City = "Denver",
                            FirstName = "Robert",
                            LastName = "A. McDonald",
                            OrderPlaced = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 157.45m,
                            PhoneNumber = "757-548-3726",
                            State = "Alabama",
                            ZipCode = "23320"
                        },
                        new
                        {
                            OrderId = 7,
                            Address = "2886 Grey Fox Farm Road",
                            City = "Pittsburg",
                            FirstName = "Rosie",
                            LastName = "J. Fails",
                            OrderPlaced = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 139.35m,
                            PhoneNumber = "281-834-4587",
                            State = "California",
                            ZipCode = "77520"
                        },
                        new
                        {
                            OrderId = 8,
                            Address = "3223 Stone Lane",
                            City = "Pittsburg",
                            FirstName = "Antonio",
                            LastName = "C. Real",
                            OrderPlaced = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 148.35m,
                            PhoneNumber = "610-422-3906",
                            State = "California",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 9,
                            Address = "1233 Freed Drive",
                            City = "Denver",
                            FirstName = "Walter",
                            LastName = "K. Clark",
                            OrderPlaced = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 165.1m,
                            PhoneNumber = "209-762-7688",
                            State = "Alabama",
                            ZipCode = "95204"
                        },
                        new
                        {
                            OrderId = 10,
                            Address = "1165 Apple Lane",
                            City = "Denver",
                            FirstName = "Keren",
                            LastName = "R. Fields",
                            OrderPlaced = new DateTime(2022, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 167.6m,
                            PhoneNumber = "309-263-5674",
                            State = "Alabama",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 11,
                            Address = "547 Davis Lane",
                            City = "Pittsburg",
                            FirstName = "Peter",
                            LastName = "D. Murphy",
                            OrderPlaced = new DateTime(2022, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 163.25m,
                            PhoneNumber = "720-323-6178",
                            State = "California",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 12,
                            Address = "1165 Apple Lane",
                            City = "Denver",
                            FirstName = "Keren",
                            LastName = "R. Fields",
                            OrderPlaced = new DateTime(2022, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 173m,
                            PhoneNumber = "309-263-5674",
                            State = "Alabama",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 13,
                            Address = "2886 Grey Fox Farm Road",
                            City = "Pittsburg",
                            FirstName = "Rosie",
                            LastName = "J. Fails",
                            OrderPlaced = new DateTime(2022, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 150.65m,
                            PhoneNumber = "281-834-4587",
                            State = "California",
                            ZipCode = "77520"
                        },
                        new
                        {
                            OrderId = 14,
                            Address = "547 Davis Lane",
                            City = "Denver",
                            FirstName = "Peter",
                            LastName = "D. Murphy",
                            OrderPlaced = new DateTime(2022, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 149.05m,
                            PhoneNumber = "720-323-6178",
                            State = "Alabama",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 15,
                            Address = "827 Kennedy Court",
                            City = "Pittsburg",
                            FirstName = "Eunice",
                            LastName = "T. Stroud",
                            OrderPlaced = new DateTime(2022, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 168.3m,
                            PhoneNumber = "774-563-0433",
                            State = "California",
                            ZipCode = "02132"
                        },
                        new
                        {
                            OrderId = 16,
                            Address = "547 Davis Lane",
                            City = "Pittsburg",
                            FirstName = "Peter",
                            LastName = "D. Murphy",
                            OrderPlaced = new DateTime(2022, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 138.9m,
                            PhoneNumber = "720-323-6178",
                            State = "California",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 17,
                            Address = "547 Davis Lane",
                            City = "Pittsburg",
                            FirstName = "Peter",
                            LastName = "D. Murphy",
                            OrderPlaced = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 178.2m,
                            PhoneNumber = "720-323-6178",
                            State = "California",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 18,
                            Address = "1165 Apple Lane",
                            City = "Denver",
                            FirstName = "Keren",
                            LastName = "R. Fields",
                            OrderPlaced = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 173.75m,
                            PhoneNumber = "309-263-5674",
                            State = "Alabama",
                            ZipCode = "80216"
                        },
                        new
                        {
                            OrderId = 19,
                            Address = "2886 Grey Fox Farm Road",
                            City = "Pittsburg",
                            FirstName = "Rosie",
                            LastName = "J. Fails",
                            OrderPlaced = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 181.7m,
                            PhoneNumber = "281-834-4587",
                            State = "California",
                            ZipCode = "95204"
                        },
                        new
                        {
                            OrderId = 20,
                            Address = "827 Kennedy Court",
                            City = "Pittsburg",
                            FirstName = "Eunice",
                            LastName = "T. Stroud",
                            OrderPlaced = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTotal = 123.9m,
                            PhoneNumber = "774-563-0433",
                            State = "California",
                            ZipCode = "02132"
                        });
                });

            modelBuilder.Entity("Candyshop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CandyId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CandyId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            Amount = 20,
                            CandyId = 1,
                            OrderId = 1,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            Amount = 5,
                            CandyId = 2,
                            OrderId = 1,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 3,
                            Amount = 16,
                            CandyId = 1,
                            OrderId = 2,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 4,
                            Amount = 15,
                            CandyId = 3,
                            OrderId = 3,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 5,
                            Amount = 10,
                            CandyId = 6,
                            OrderId = 3,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 6,
                            Amount = 5,
                            CandyId = 12,
                            OrderId = 3,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 7,
                            Amount = 29,
                            CandyId = 10,
                            OrderId = 4,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 8,
                            Amount = 14,
                            CandyId = 3,
                            OrderId = 5,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 9,
                            Amount = 24,
                            CandyId = 14,
                            OrderId = 5,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 10,
                            Amount = 7,
                            CandyId = 1,
                            OrderId = 5,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 12,
                            Amount = 10,
                            CandyId = 10,
                            OrderId = 6,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 13,
                            Amount = 7,
                            CandyId = 12,
                            OrderId = 6,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 14,
                            Amount = 8,
                            CandyId = 1,
                            OrderId = 6,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 15,
                            Amount = 6,
                            CandyId = 6,
                            OrderId = 6,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 16,
                            Amount = 30,
                            CandyId = 2,
                            OrderId = 7,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 17,
                            Amount = 3,
                            CandyId = 12,
                            OrderId = 7,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 18,
                            Amount = 15,
                            CandyId = 10,
                            OrderId = 8,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 19,
                            Amount = 18,
                            CandyId = 9,
                            OrderId = 8,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 20,
                            Amount = 15,
                            CandyId = 4,
                            OrderId = 9,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 21,
                            Amount = 15,
                            CandyId = 14,
                            OrderId = 9,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 22,
                            Amount = 13,
                            CandyId = 10,
                            OrderId = 9,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 23,
                            Amount = 35,
                            CandyId = 14,
                            OrderId = 10,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 24,
                            Amount = 13,
                            CandyId = 1,
                            OrderId = 10,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 25,
                            Amount = 20,
                            CandyId = 3,
                            OrderId = 11,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 26,
                            Amount = 15,
                            CandyId = 12,
                            OrderId = 11,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 27,
                            Amount = 25,
                            CandyId = 2,
                            OrderId = 12,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 28,
                            Amount = 15,
                            CandyId = 6,
                            OrderId = 12,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 29,
                            Amount = 35,
                            CandyId = 14,
                            OrderId = 13,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 30,
                            Amount = 12,
                            CandyId = 10,
                            OrderId = 13,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 31,
                            Amount = 22,
                            CandyId = 3,
                            OrderId = 14,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 32,
                            Amount = 17,
                            CandyId = 6,
                            OrderId = 14,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 33,
                            Amount = 34,
                            CandyId = 9,
                            OrderId = 15,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 34,
                            Amount = 15,
                            CandyId = 10,
                            OrderId = 16,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 35,
                            Amount = 27,
                            CandyId = 3,
                            OrderId = 16,
                            Price = 2.95m
                        },
                        new
                        {
                            OrderDetailId = 36,
                            Amount = 17,
                            CandyId = 1,
                            OrderId = 17,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 37,
                            Amount = 7,
                            CandyId = 6,
                            OrderId = 17,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 38,
                            Amount = 12,
                            CandyId = 9,
                            OrderId = 17,
                            Price = 4.95m
                        },
                        new
                        {
                            OrderDetailId = 39,
                            Amount = 25,
                            CandyId = 12,
                            OrderId = 18,
                            Price = 6.95m
                        },
                        new
                        {
                            OrderDetailId = 40,
                            Amount = 17,
                            CandyId = 2,
                            OrderId = 19,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 41,
                            Amount = 29,
                            CandyId = 10,
                            OrderId = 19,
                            Price = 3.95m
                        },
                        new
                        {
                            OrderDetailId = 42,
                            Amount = 42,
                            CandyId = 14,
                            OrderId = 20,
                            Price = 2.95m
                        });
                });

            modelBuilder.Entity("Candyshop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CandyId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("CandyId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "e2bea85a-261c-47d9-ba4c-757c8a7059c6",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6caa1f71-4f0f-455b-8098-763ba54b4a83",
                            Email = "admin@admin.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.SE",
                            NormalizedUserName = "ADMIN@ADMIN.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBtI4D3zY8s344GG2msXpF2ZD774Xpfo4CFnKiTx3/Q8ma7WK3FJrj6abrjZCngZsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab54430b-a0e0-4b5d-882c-f5e98aabdd4f",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Candyshop.Models.Candy", b =>
                {
                    b.HasOne("Candyshop.Models.Category", "Category")
                        .WithMany("Candies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Candyshop.Models.Discount", b =>
                {
                    b.HasOne("Candyshop.Models.Campaign", "Campaign")
                        .WithMany("Discounts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Candyshop.Models.Candy", "Candy")
                        .WithMany("Discounts")
                        .HasForeignKey("CandyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Candyshop.Models.OrderDetail", b =>
                {
                    b.HasOne("Candyshop.Models.Candy", "Candy")
                        .WithMany()
                        .HasForeignKey("CandyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Candyshop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Candyshop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("Candyshop.Models.Candy", "Candy")
                        .WithMany()
                        .HasForeignKey("CandyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
